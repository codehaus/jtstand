/*
 * Copyright (c) 2009 Albert Kurucz. 
 *
 * This file, Login.java is part of JTStand.
 *
 * JTStand is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * JTStand is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with GTStand.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.jtstand.swing;

import com.jtstand.Authentication;

/**
 *
 * @author  albert_kurucz
 */
public class Login extends javax.swing.JDialog {

    public static final long serialVersionUID = 20081114L;
    private Authentication at;

    /** Creates new form GTLogin */
    public Login(java.awt.Frame parent, boolean modal, Authentication at) {
        super(parent, modal);
        this.at = at;
        initComponents();
        jPasswordField.setEnabled(at.isPassword());
        jTextFieldUser.requestFocus();
        CountDownLogin cd = new CountDownLogin(this, 60);
        setMinimumSize(this.getSize());
        Util.centerOnParent(this);
        this.setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldUser = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jPasswordField = new javax.swing.JPasswordField();
        jPanelButtons = new javax.swing.JPanel();
        jButtonLogin = new javax.swing.JButton();
        jButtonCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Log On");

        jPanel2.setLayout(new java.awt.GridBagLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Operator"));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel1.setText("Username:");
        jLabel1.setToolTipText("Username or Employee#");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jLabel1, gridBagConstraints);

        jTextFieldUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldUserActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jTextFieldUser, gridBagConstraints);

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel2.setText("Password:");
        jLabel2.setToolTipText("Password is sensitive!");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jLabel2, gridBagConstraints);

        jPasswordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPasswordFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jPasswordField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(4, 4, 4, 4);
        jPanel2.add(jPanel1, gridBagConstraints);

        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        jPanelButtons.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 30, 15));

        jButtonLogin.setText("Login");
        jButtonLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLoginActionPerformed(evt);
            }
        });
        jPanelButtons.add(jButtonLogin);

        jButtonCancel.setText("Cancel");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });
        jPanelButtons.add(jButtonCancel);

        getContentPane().add(jPanelButtons, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

//    public static void setClipboard(String str) {
//        StringSelection ss = new StringSelection(str);
//        Toolkit.getDefaultToolkit().getSystemClipboard().setContents(ss, null);
//    }

//    public static void tryToLogin(GTFrame gtframe, AuthenticationType at, String username, String password, boolean toClipboard)
//            throws Exception {
//        if (at.getMode().equals(com.sanminasci.gts.gtstand.AuthenticationModeType.ANY_EMPLOYEE)) {
//            gtframe.loggedIn(username, username);
//            return;
//        }
//        String encpw = null;
//        if (at.getMode().equals(com.sanminasci.gts.gtstand.AuthenticationModeType.PASSWORD)) {
//            encpw = encryptString(password);
//            System.out.println(java.util.ResourceBundle.getBundle("GTStand").getString("Encrypted_password:") + encpw);
//            if (toClipboard) {
//                String locuser = "<LocUser Name=\"" +
//                        username +
//                        "\" Password=\"" +
//                        encpw +
//                        "\" EmpNumber=\"" +
//                        username +
//                        "\"/>";
//                setClipboard(locuser);
//            }
//        }
//        for (Iterator<DomUserType> it = at.getDomUserList().iterator(); it.hasNext();) {
//            DomUserType domuser = it.next();
//            if (domuser.getName().equalsIgnoreCase(username) || domuser.getEmpNumber().toString().equals(username)) {
//                if (at.getMode().equals(com.sanminasci.gts.gtstand.AuthenticationModeType.NO_PASSWORD) ||
//                        domainAuthenticated(domuser, String.valueOf(password))) {
//                    gtframe.loggedIn(domuser.getEmpNumber().toString(), domuser.getName());
//                    return;
//                }
//            }
//        }
//        for (Iterator<LocUserType> it = at.getLocUserList().iterator(); it.hasNext();) {
//            LocUserType locuser = it.next();
//            if (locuser.getName().equalsIgnoreCase(username) || locuser.getEmpNumber().toString().equals(username)) {
//                try {
//                    if (at.getMode().equals(com.sanminasci.gts.gtstand.AuthenticationModeType.NO_PASSWORD) || locuser.getPassword().equals(encpw)) {
//                        gtframe.loggedIn(locuser.getEmpNumber().toString(), locuser.getName());
//                        return;
//                    }
//                } catch (Exception ex1) {
//                    System.err.println("Exception:" + ex1.getMessage());
//                }
//            }
//        }
//    }
    private void jButtonLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoginActionPerformed
        try {
            /* trim the username */
            jTextFieldUser.setText(jTextFieldUser.getText().trim());
            if (jTextFieldUser.getText().length() == 0) {
                return;
            }
            //boolean toClipboard = evt.CTRL_MASK == (evt.getModifiers() & evt.CTRL_MASK);
            at.login(jTextFieldUser.getText(), String.valueOf(jPasswordField.getPassword()));
            this.dispose();
        //tryToLogin(gtframe, at, jTextFieldUser.getText(), String.valueOf(jPasswordField.getPassword()), toClipboard);
        } catch (Exception ex) {
            System.out.println("Exception:" + ex.getMessage());
        }
        jTextFieldUser.requestFocus();
    }//GEN-LAST:event_jButtonLoginActionPerformed
//    public static boolean domainAuthenticated(DomUserType domuser, String password) {
//        try {
//            UniAddress dc = null;
//            String dcstr = System.getProperty("domainController");
//            if (dcstr == null) {
//                NbtAddress nbt = NbtAddress.getByName(domuser.getDomain(), 0x1d, null);
//                dc = new UniAddress(nbt);
//            } else {
//                dc = new UniAddress(InetAddress.getByName(dcstr));
//            }
//            //172.18.76.247
//            NtlmPasswordAuthentication auth = new NtlmPasswordAuthentication(domuser.getDomain(), domuser.getName(), password);
//            SmbSession.logon(dc, auth);
//            return true;
//        } catch (java.net.UnknownHostException ex1) {
//            System.err.println("UnknownHostException:" + ex1.getMessage());
//        } catch (jcifs.smb.SmbException ex2) {
//            System.err.println("SmbException:" + ex2.getMessage());
//        } catch (Exception ex) {
//            System.err.println("Exception:" + ex.getMessage());
//        }
//        return false;
//    }
    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButtonCancelActionPerformed
                private void jPasswordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPasswordFieldActionPerformed
                    jButtonLogin.requestFocus();
                    jButtonLogin.doClick();
    }//GEN-LAST:event_jPasswordFieldActionPerformed
                    private void jTextFieldUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldUserActionPerformed
                        jPasswordField.setText("");
                        jPasswordField.requestFocus();
    }//GEN-LAST:event_jTextFieldUserActionPerformed
    public static String encryptString(String x) throws Exception {
        return byteArrayToHexString(encrypt(x));
    }

    public static byte[] encrypt(String x) throws Exception {
        java.security.MessageDigest d = null;
        d = java.security.MessageDigest.getInstance("SHA-1");
        d.reset();
        d.update(x.getBytes());
        return d.digest();
    }

    public static String byteArrayToHexString(byte[] b) {
        StringBuffer sb = new StringBuffer(b.length * 2);
        for (int i = 0; i < b.length; i++) {
            int v = b[i] & 0xff;
            if (v < 16) {
                sb.append('0');
            }
            sb.append(Integer.toHexString(v));
        }
        return sb.toString().toUpperCase();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonLogin;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanelButtons;
    private javax.swing.JPasswordField jPasswordField;
    private javax.swing.JTextField jTextFieldUser;
    // End of variables declaration//GEN-END:variables

    public void tick(int i) {
        jButtonCancel.setText("Cancel " + i);
    }

    public void cancel() {
        jButtonCancel.doClick();
    }//    public static void main(String[] args) {
//        String wins = Config.getProperty("jcifs.netbios.wins");
//        if (wins == null) {
//            Config.setProperty("jcifs.netbios.wins", "143.116.28.143");
//        }
//        System.out.println("WINS address:" + NbtAddress.getWINSAddress().getHostAddress());
//
//        NbtAddress nbt = null;
////        try{
////            NtlmChallenge nc=SmbSession.getChallengeForDomain();
////            if(nc!=null){
////                UniAddress ua=nc.dc;
////                if(ua!=null){
////                    System.out.println("Domain Address:"+ua.getHostAddress());
////                }
////            }
////        }catch(java.net.UnknownHostException ex){
////            System.err.println("UnknownHostException:"+ex.getMessage());
////        }catch(SmbException ex2){
////            System.out.println("SmbException:"+ex2.getMessage());
////        }
//        try {
//            nbt = NbtAddress.getByName("am", 0x1d, null);
//            System.out.println("NBT address:" + nbt.getHostAddress());
//        } catch (java.net.UnknownHostException ex) {
//            System.err.println("UnknownHostException:" + ex.getMessage());
//        }
//    }
}

class CountDownLogin extends Thread {

    Login gtn = null;
    int cnt = 0;

    public CountDownLogin(Login gtn, int cnt) {
        this.gtn = gtn;
        this.cnt = cnt;
        this.start();
    }

    @Override
    public void run() {
        try {
            while (cnt != 0) {
                gtn.tick(cnt);
                sleep(1000);
                cnt--;
            }
            gtn.tick(0);
            sleep(200); //to allow to read

            gtn.cancel();
        } catch (InterruptedException ex) {
            //do nothing if interrupted
        }
    }
}
