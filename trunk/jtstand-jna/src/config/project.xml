<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<project name="JNA Demo" pun="HIBERNATE" defaultHostName="DEFAULTSTATION" xmlns="http://www.jtstand.com/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.jtstand.com/ jtstand-1.0.xsd">
    <class name="Clib"><![CDATA[
        import com.sun.jna.NativeLibrary
        import com.sun.jna.Platform

        public class Clib {
          private static def libc = NativeLibrary.getInstance(Platform.isWindows() ? "msvcrt" : "c")

          def methodMissing(String name, args) {
            def method = libc.getFunction(name)
            if (method) {
                return method.invokeInt(args)
            } else {
              throw new MissingMethodException(name, getClass(), args)
            }
          }
        }
    ]]>
    </class>
    <class name="JTVisaInst"><![CDATA[
        public class JTVisaInst {
          final int sesn
          def visa

          void setSesn(int newSesn){
            this.sesn = newSesn
            println "Instrument opened: $sesn"
          }

          void close(){
            viClose(sesn)
            println "Instrument closed: $sesn"
          }

          def methodMissing(String name, args) {
            println("JTVisaInst missing: $name")
            visa."$name"(*args)
          }

          String getRsrcClass(){
            return getRsrcClass(sesn)
          }

        }
    ]]>
    </class>
    <class name="JTVisa"><![CDATA[
        import com.sun.jna.NativeLibrary
        import com.sun.jna.Platform
        import com.sun.jna.ptr.IntByReference
        import com.sun.jna.Native
        import JTVisaInst

        public class JTVisa {
          static def libc = NativeLibrary.getInstance(Platform.isWindows() ? "visa32" : "visa32")
          final int sesn

          void setSesn(int newSesn){
            this.sesn = newSesn
            println "Session opened: $sesn"
          }

          void close(){
            viClose(sesn)
            println "Session closed: $sesn"
          }

          JTVisa(){
            IntByReference defaultRM = new IntByReference()
            if (0 == viOpenDefaultRM(defaultRM)) {
              setSesn(defaultRM.getValue())
            } else {
              throw new IllegalStateException('Cannot open default RM')
            }
          }

          def open(String rsrcName){
            return open(rsrcName, 0, 0)
          }

          def open(String rsrcName, int accessMode, int openTimeout){
            IntByReference vi = new IntByReference()
            if (0 == viOpen(sesn, rsrcName, accessMode, openTimeout, vi)){
              String name = getRsrcClass(vi.getValue())
              if (name.equals('INSTR')){
                return new JTVisaInst(sesn:vi.getValue(), visa:this)
              } else {
                viClose(vi.getValue())
                throw new IllegalArgumentException("Not supported class: $name")
              }
            } else {
              throw new IllegalStateException("Cannot open: $rsrcName")
            }
          }

          int getAttributeInt(int attr){
            return getAttributeInt(sesn, attr)
          }

          int getAttributeInt(int inst, int attr){
            IntByReference retval = new IntByReference()
            def status = viGetAttribute(inst, (int)attr, retval)
            if (0 == status){
              return retval.getValue()
            } else {
              throw new IllegalStateException("Error reading integer attribute of instrument: $status")
            }
          }

          String getAttributeString(int attr){
            return getAttributeString(sesn, attr)
          }

          String getAttributeString(int inst, int attr){
            byte[] retval = new byte[256]
            def status = viGetAttribute(inst, (int)attr, retval)
            if (0 == status){
              return Native.toString(retval)
            } else {
              throw new IllegalStateException("Error reading string attribute of instrument: $status")
            }
          }

          String getRsrcClass(int inst){
            return getAttributeString(inst,(int)0xBFFF0001)
          }

          def methodMissing(String name, args) {
            println("JTVisa missing: $name")

            def method = libc.getFunction(name)
            if (method) {
                return method.invokeInt(args)
            } else {
              throw new MissingMethodException(name, getClass(), args)
            }
          }
        }
    ]]>
    </class>
    <property name="persistenceProperties"><![CDATA[
        [
        'hibernate.cache.provider_class' : 'org.hibernate.cache.NoCacheProvider',
        'hibernate.show_sql' : 'false'
        ]
        ]]>
    </property>
    <property name="PERSISTING_POLICY" value="SEQUENCE"/>
    <property name="DEBUG_ENABLED" value="true"/>
    <property name="clib" mutex="true">new Clib()</property>
    <property name="visa" mutex="true">new JTVisa()</property>
    <authentication>
        <domainUser loginName="albert_kurucz" employeeNumber="87377" domainName="AM"/>
        <localUser realName="anybody"  employeeNumber="55555" password="DA39A3EE5E6B4B0D3255BFEF95601890AFD80709" loginName="55555"/>
    </authentication>
    <product partNumber="JNA_DEMO" partRevision="1.0">
        <testType name="DEMO">
            <testSequence subversionUrl="jnaDemo.xml" revision="164"/>
        </testType>
    </product>
    <product partNumber="VISA_DEMO" partRevision="1.0">
        <testType name="DEMO">
            <testSequence subversionUrl="visaDemo.xml" revision="164"/>
        </testType>
    </product>
    <product partNumber="NI845X_DEMO" partRevision="1.0">
        <testType name="DEMO">
            <testSequence><![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<testSequence xmlns="http://www.jtstand.com/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="Hello NI845X Demo" xsi:schemaLocation="http://www.jtstand.com/ http://www.jtstand.com/jtstand-1.0.xsd">
    <property name="helloWorld" value="Hello World"/>
    <mainStep name="The Main Step">
        <remark>This is the main step</remark>
        <limit comp="EQ" unit="Hello World"/>
        <script>setValue helloWorld</script>
    </mainStep>
</testSequence>]]>
            </testSequence>
        </testType>
    </product>
    <testStation hostName="DEFAULTSTATION">
        <remark>This is the configuration file for the host: 'DEFAULTSTATION'</remark>
        <property name="FIXTURE_COLUMNS" value="1"/>
        <fixture fixtureName="FX1" serialNumber="FX1">
            <property name="uutPort" value="ASRL1::INSTR"/>
            <testType partNumber="JNA_DEMO" partRevision="1.0" name="DEMO"/>
            <testType partNumber="VISA_DEMO" partRevision="1.0" name="DEMO"/>
        </fixture>
    </testStation>
</project>
